name: release-please

on:
  push:
    branches:
      - master

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  release-please:
    name: "Creating release"
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: .github/release-please-config.json
          manifest-file: .github/release-please-manifest.json

  docker:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    needs:
      - release-please
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build binaries
        run: |
          mkdir -p bin
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-w -s" -o bin/alertmanager-gateway-linux-amd64 .
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-w -s" -o bin/alertmanager-gateway-linux-arm64 .

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.tag_name }}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  helm:
    name: Publish Helm chart
    runs-on: ubuntu-latest
    needs:
      - release-please
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Log in to GitHub Container Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ghcr.io --username ${{ github.actor }} --password-stdin

      - name: Package and push Helm chart
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION="${{ needs.release-please.outputs.tag_name }}"
          VERSION="${VERSION#v}"

          # Update chart version
          sed -i "s/^version:.*/version: ${VERSION}/" charts/alertmanager-gateway/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${VERSION}\"/" charts/alertmanager-gateway/Chart.yaml

          # Package the chart
          helm package charts/alertmanager-gateway

          # Push to OCI registry
          OCI_PATH="oci://ghcr.io/${{ github.repository }}/charts/alertmanager-gateway"
          helm push alertmanager-gateway-${VERSION}.tgz oci://ghcr.io/${{ github.repository }}/charts

          # Add step summary
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          ## Helm Chart Published

          **Chart:** alertmanager-gateway
          **Version:** ${VERSION}
          **Registry:** ${OCI_PATH}

          ### Installation

          \`\`\`bash
          helm install my-gateway ${OCI_PATH} --version ${VERSION}
          \`\`\`

          ### Upgrade

          \`\`\`bash
          helm upgrade my-gateway ${OCI_PATH} --version ${VERSION}
          \`\`\`
          EOF
