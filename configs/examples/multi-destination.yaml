# Multi-Destination Routing Example
# This configuration demonstrates routing alerts to different destinations based on severity

server:
  port: 8080

destinations:
  # Critical alerts go to PagerDuty for immediate attention
  - name: "critical-pagerduty"
    url: "https://events.pagerduty.com/v2/enqueue"
    method: "POST"
    format: "json"
    engine: "jq"
    transform: |
      if .commonLabels.severity == "critical" then
        {
          routing_key: "${env:PAGERDUTY_CRITICAL_KEY}",
          event_action: (if .status == "firing" then "trigger" else "resolve" end),
          dedup_key: .groupKey,
          payload: {
            summary: "CRITICAL: " + .groupLabels.alertname,
            severity: "critical",
            source: .externalURL
          }
        }
      else empty end
    headers:
      Content-Type: "application/json"
    enabled: true
    retry:
      max_attempts: 5
      backoff: exponential

  # Warning alerts go to Slack for team visibility
  - name: "warning-slack"
    url: "${env:SLACK_WEBHOOK_URL}"
    method: "POST"
    format: "json"
    engine: "jq"
    transform: |
      if .commonLabels.severity != "critical" then
        {
          text: (
            (if .status == "firing" then "⚠️" else "✅" end) + " " +
            .groupLabels.alertname + " [" + (.commonLabels.severity // "info") + "]"
          ),
          attachments: [{
            color: (if .status == "resolved" then "good" else "warning" end),
            title: .commonAnnotations.summary,
            text: (.alerts | length | tostring) + " alert(s) " + .status
          }]
        }
      else empty end
    enabled: true

  # All alerts go to audit log
  - name: "audit-log"
    url: "${env:LOG_AGGREGATOR_URL}/v1/logs"
    method: "POST"
    format: "json"
    engine: "jq"
    transform: |
      {
        timestamp: now | todateiso8601,
        alert_name: .groupLabels.alertname,
        status: .status,
        severity: (.commonLabels.severity // "info"),
        alert_count: (.alerts | length),
        group_key: .groupKey
      }
    headers:
      Authorization: "Bearer ${env:LOG_API_TOKEN}"
    enabled: true