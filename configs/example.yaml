# Example configuration for Alertmanager Gateway

server:
  host: "0.0.0.0"
  port: 8080
  read_timeout: 30s
  write_timeout: 30s
  auth:
    enabled: true
    username: "alertmanager"
    password: "${GATEWAY_PASSWORD}"

destinations:
  # Flock Chat example (webhook URL: /webhook/flock)
  - name: "flock"
    method: "POST"
    url: "https://api.flock.com/hooks/sendMessage/${FLOCK_WEBHOOK_ID}"
    format: "json"
    engine: "jq"
    transform: |
      {
        text: ("ðŸš¨ Alert: " + .groupLabels.alertname + " [" + .status + "]"),
        attachments: [{
          title: .commonAnnotations.summary,
          description: (.alerts | map(.annotations.description) | join("\n")),
          color: (if .status == "resolved" then "#36a64f" else "#ff0000" end),
          views: {
            flockml: (
              "<flockml>" +
              (.alerts | map(
                "<strong>" + .labels.instance + "</strong>: " + 
                .annotations.summary + "<br/>"
              ) | join("")) +
              "</flockml>"
            )
          }
        }]
      }

  # Jenkins webhook example (webhook URL: /webhook/jenkins)
  - name: "jenkins"
    method: "POST"
    url: "${JENKINS_URL}/generic-webhook-trigger/invoke"
    format: "json"
    headers:
      token: "${JENKINS_TOKEN}"
    engine: "jq"
    transform: |
      {
        alertname: .groupLabels.alertname,
        status: .status,
        severity: .commonLabels.severity,
        instances: (.alerts | map(.labels.instance)),
        summary: .commonAnnotations.summary,
        startsAt: (.alerts | map(.startsAt) | sort | first),
        alertCount: (.alerts | length)
      }

  # Example with split alerts for ticketing system (webhook URL: /webhook/tickets)
  - name: "tickets"
    method: "POST"
    url: "${TICKET_API_URL}/api/v1/tickets"
    format: "json"
    split_alerts: true
    headers:
      Authorization: "Bearer ${TICKET_API_TOKEN}"
      Content-Type: "application/json"
    engine: "jq"
    transform: |
      {
        title: ("[" + .labels.severity + "] " + .labels.alertname),
        description: .annotations.description,
        priority: (
          if .labels.severity == "critical" then "urgent"
          elif .labels.severity == "warning" then "high"
          else "normal" end
        ),
        tags: [.labels.service, .labels.env, "monitoring"],
        custom_fields: {
          alert_fingerprint: .fingerprint,
          instance: .labels.instance,
          starts_at: .startsAt,
          prometheus_url: .generatorURL
        }
      }

  # Example with form-encoded output (webhook URL: /webhook/legacy-system)
  - name: "legacy-system"
    method: "POST"
    url: "${LEGACY_SYSTEM_URL}/alert"
    format: "form"
    engine: "go-template"
    template: |
      alert_name={{ .GroupLabels.alertname }}
      status={{ .Status }}
      severity={{ .CommonLabels.severity }}
      instance_count={{ len .Alerts }}
      message={{ .CommonAnnotations.summary }}
      timestamp={{ now | unixtime }}

  # Example with query parameters (webhook URL: /webhook/monitoring-api)
  - name: "monitoring-api"
    method: "GET"
    url: "${MONITOR_API_URL}/api/alert"
    format: "query"
    engine: "go-template"
    template: |
      name={{ .GroupLabels.alertname }}
      status={{ .Status }}
      severity={{ .CommonLabels.severity | default "unknown" }}
      instances={{ range $i, $a := .Alerts }}{{ if $i }},{{ end }}{{ $a.Labels.instance }}{{ end }}
      group={{ .GroupKey }}